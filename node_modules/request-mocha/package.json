{
  "name": "request-mocha",
  "description": "Request utilities for Mocha",
  "version": "0.2.0",
  "homepage": "https://github.com/uber/request-mocha",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/uber/request-mocha.git"
  },
  "bugs": {
    "url": "https://github.com/uber/request-mocha/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/uber/request-mocha/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/request-mocha",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt jshint && mocha"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.11.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.0",
    "grunt-cli": "~0.1.13",
    "express": "~3.4.8",
    "chai": "~1.9.0",
    "request": "~2.33.0"
  },
  "keywords": [
    "request",
    "mocha",
    "test",
    "utilities"
  ],
  "readme": "# request-mocha [![Build status](https://travis-ci.org/uber/request-mocha.png?branch=master)](https://travis-ci.org/uber/request-mocha)\n\n[Request][request] utilities for [Mocha][mocha].\n\n[request]: https://github.com/mikeal/request\n[mocha]: https://github.com/visionmedia/mocha\n\nThis was built as a repetitive test utility to request results and assert later on.\n\n## Getting Started\nInstall the module with: `npm install request-mocha`\n\n```javascript\n// In your test suite\nvar request = require('request');\nvar httpUtils = require('request-mocha')(request);\ndescribe('A server receiving a request', function () {\n  before(startServer);\n\n  // Make request and save results to `this.err`, `this.res`, and `this.body`\n  httpUtils.save('http://localhost:8080/');\n\n  // Assert against mocha's `this` context\n  it('responded with \"Hello World!\"', function () {\n    expect(this.err).to.equal(null);\n    expect(this.res.statusCode).to.equal(200);\n    expect(this.body).to.equal('Hello World!');\n  });\n});\n```\n\n## Documentation\n`request-mocha` provides a function, `requestMocha`, as its `module.exports`.\n\n### `requestMocha(request)`\nCreate a set of utilities bound to a specific version of `request`.\n\n> This interface is necessary to prevent cross-version conflicts (e.g. `jar` problems)\n\n- request `Request` - `request` library to use for utility functions\n\n`requestMocha` returns an object which we will refer to as `httpUtils`.\n\n#### `httpUtils.save(options)`\nMake a request to a server via [request][] inside of a [mocha][] `before/setup` block.\n\n- options `Object` - Parameters to pass through to [request's][request] `request` function\n\nResults will be saved to mocha's `this` context. The same `this` context is shared between all mocha `before`, `beforeEach`, `after`, `afterEach`, and `it` invocations.\n\n- this.err `Error|null` - Error if one occurred while making the request (e.g. `ECONNREFUSED`)\n- this.res `Response` - Response from the server\n- this.body `String` - Response body from the server (alias for `res.body`)\n\n#### `httpUtils._save(options)`\nInvoke `request/save` mechanism without `before/setup` wrapper.\n\nThe parameters are the same as `httpUtils.save`.\n\nThe returned value is a `function` with a signature of `(done)`. When invoked, it will write to `this.err`, `this.res`, and `this.body` as done in `httpUtils.save`.\n\nIt is expected that you invoke the returned function via a `.call` or `.apply` to an asynchronous `before` context with its callback. This is practical when there is data locked into a `this` context that needs to be used for a `request`.\n\n```js\n// Prepare some `this` data\nbefore(function () {\n  this.credentials = {\n    username: 'todd',\n    password: 'keyboardcat'\n  };\n});\n\n// In an asynchronous `before` block\nbefore(function (done) {\n  // Prepare the save call\n  httpUtils._save({\n    method: 'POST',\n    url: 'http://localhost:8080/login',\n    form: this.credentials\n  // Invoke on the current context with the current callback\n  }).call(this, done);\n});\n```\n\n> The alternative is to use `var's` outside of `before` blocks. Unfortunately, those cannot be re-used while a `before` function can be.\n\n## Examples\n### Making a `POST` request inside of tests\n```js\nhttpUtils.save({\n  method: 'POST',\n  url: 'http://localhost:8080/',\n  form: {\n    my: 'data'\n  }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## License\nCopyright (c) 2014 Uber\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "request-mocha@0.2.0",
  "dist": {
    "shasum": "c3d6eb9bcb50cf2ba3d70289c659d7b8d9679425"
  },
  "_from": "request-mocha@",
  "_resolved": "https://registry.npmjs.org/request-mocha/-/request-mocha-0.2.0.tgz"
}
